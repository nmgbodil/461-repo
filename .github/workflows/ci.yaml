name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black/isort/flake8)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      
      - name: Install lint dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install black isort flake8 flake8-docstrings
          fi
        
      - name: Black (check only)
        run: black --check .

      - name: isort (check only)
        run: isort --check-only -diff .
      
      - name: flake8
        run: flake8
  
  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      
      - name: Install project + mypy
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install mypy pytest
          fi
          pip install -e .
      
      - name: Run mypy
        run: mypy src tests
  
  tests:
    name: Unit tests + coverage
    runs-on: ubuntu-latest
    needs: [ lint, typecheck ]
    strategy:
      matrix:
        python-version: [ "3.11", "3.12" ]
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Set up Python $${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      
      - name: Install project + test dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            pip install pytest pytest-cov
          fi
          pip install -e .
      
      - name: Run tests with coverage
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml:coverage.xml \
            --cov-fail-under=80
      
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: warn
